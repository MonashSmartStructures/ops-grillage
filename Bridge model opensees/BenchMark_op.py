# Grillage generator wizard
# Model name: BenchMark
# Constructed on:01/04/2021 17:03:36
import numpy as np
import math
import openseespy.opensees as ops
ops.wipe()
ops.model('basic', '-ndm', 3, '-ndf', 6)
# create transformation 1
ops.geomTransf("Linear", 1, *[0, 0, 1])
# create transformation 2
ops.geomTransf("Linear", 2, *[0.9063077870366499, 0, 0.42261826174069944])
# create transformation 3
ops.geomTransf("Linear", 3, *[1, 0, 0])
# Node generation procedure
ops.node(1, 0.0, 0, 0.0)
ops.node(2, 0.6390384757687505, 0, 0.0)
ops.node(3, 1.278076951537501, 0, 0.0)
ops.node(4, 1.9171154273062516, 0, 0.0)
ops.node(5, 2.556153903075002, 0, 0.0)
ops.node(6, 3.1951923788437524, 0, 0.0)
ops.node(7, 3.8342308546125032, 0, 0.0)
ops.node(8, 4.473269330381253, 0, 0.0)
ops.node(9, 5.112307806150004, 0, 0.0)
ops.node(10, 5.751346281918755, 0, 0.0)
ops.node(11, 6.390384757687505, 0, 0.0)
ops.node(12, 7.029423233456256, 0, 0.0)
ops.node(13, 0.0, 0, 1.0)
ops.node(14, 0.6390384757687505, 0, 1.0)
ops.node(15, 1.278076951537501, 0, 1.0)
ops.node(16, 1.9171154273062516, 0, 1.0)
ops.node(17, 2.556153903075002, 0, 1.0)
ops.node(18, 3.1951923788437524, 0, 1.0)
ops.node(19, 3.8342308546125032, 0, 1.0)
ops.node(20, 4.473269330381253, 0, 1.0)
ops.node(21, 5.112307806150004, 0, 1.0)
ops.node(22, 5.751346281918755, 0, 1.0)
ops.node(23, 6.390384757687505, 0, 1.0)
ops.node(24, 7.029423233456256, 0, 1.0)
ops.node(25, 0.0, 0, 2.0)
ops.node(26, 0.6390384757687505, 0, 2.0)
ops.node(27, 1.278076951537501, 0, 2.0)
ops.node(28, 1.9171154273062516, 0, 2.0)
ops.node(29, 2.556153903075002, 0, 2.0)
ops.node(30, 3.1951923788437524, 0, 2.0)
ops.node(31, 3.8342308546125032, 0, 2.0)
ops.node(32, 4.473269330381253, 0, 2.0)
ops.node(33, 5.112307806150004, 0, 2.0)
ops.node(34, 5.751346281918755, 0, 2.0)
ops.node(35, 6.390384757687505, 0, 2.0)
ops.node(36, 7.029423233456256, 0, 2.0)
ops.node(37, 0.0, 0, 3.0)
ops.node(38, 0.6390384757687505, 0, 3.0)
ops.node(39, 1.278076951537501, 0, 3.0)
ops.node(40, 1.9171154273062516, 0, 3.0)
ops.node(41, 2.556153903075002, 0, 3.0)
ops.node(42, 3.1951923788437524, 0, 3.0)
ops.node(43, 3.8342308546125032, 0, 3.0)
ops.node(44, 4.473269330381253, 0, 3.0)
ops.node(45, 5.112307806150004, 0, 3.0)
ops.node(46, 5.751346281918755, 0, 3.0)
ops.node(47, 6.390384757687505, 0, 3.0)
ops.node(48, 7.029423233456256, 0, 3.0)
ops.node(49, 0.0, 0, 4.0)
ops.node(50, 0.6390384757687505, 0, 4.0)
ops.node(51, 1.278076951537501, 0, 4.0)
ops.node(52, 1.9171154273062516, 0, 4.0)
ops.node(53, 2.556153903075002, 0, 4.0)
ops.node(54, 3.1951923788437524, 0, 4.0)
ops.node(55, 3.8342308546125032, 0, 4.0)
ops.node(56, 4.473269330381253, 0, 4.0)
ops.node(57, 5.112307806150004, 0, 4.0)
ops.node(58, 5.751346281918755, 0, 4.0)
ops.node(59, 6.390384757687505, 0, 4.0)
ops.node(60, 7.029423233456256, 0, 4.0)
ops.node(61, 0.0, 0, 5.0)
ops.node(62, 0.6390384757687505, 0, 5.0)
ops.node(63, 1.278076951537501, 0, 5.0)
ops.node(64, 1.9171154273062516, 0, 5.0)
ops.node(65, 2.556153903075002, 0, 5.0)
ops.node(66, 3.1951923788437524, 0, 5.0)
ops.node(67, 3.8342308546125032, 0, 5.0)
ops.node(68, 4.473269330381253, 0, 5.0)
ops.node(69, 5.112307806150004, 0, 5.0)
ops.node(70, 5.751346281918755, 0, 5.0)
ops.node(71, 6.390384757687505, 0, 5.0)
ops.node(72, 7.029423233456256, 0, 5.0)
ops.node(73, 7.6684617092250065, 0, 0.0)
ops.node(74, 8.134769367380006, 0, 0.0)
ops.node(75, 8.601077025535004, 0, 0.0)
ops.node(76, 9.067384683690003, 0, 0.0)
ops.node(77, 9.533692341845, 0, 0.0)
ops.node(78, 10.0, 0, 0.0)
ops.node(79, 7.6684617092250065, 0, 1.0)
ops.node(80, 8.134769367380006, 0, 1.0)
ops.node(81, 8.601077025535004, 0, 1.0)
ops.node(82, 9.067384683690003, 0, 1.0)
ops.node(83, 9.533692341845, 0, 1.0)
ops.node(84, 7.6684617092250065, 0, 2.0)
ops.node(85, 8.134769367380006, 0, 2.0)
ops.node(86, 8.601077025535004, 0, 2.0)
ops.node(87, 9.067384683690003, 0, 2.0)
ops.node(88, 7.6684617092250065, 0, 3.0)
ops.node(89, 8.134769367380006, 0, 3.0)
ops.node(90, 8.601077025535004, 0, 3.0)
ops.node(91, 7.6684617092250065, 0, 4.0)
ops.node(92, 8.134769367380006, 0, 4.0)
ops.node(93, 7.6684617092250065, 0, 5.0)
ops.node(94, -0.4663076581549994, 0, 5.0)
ops.node(95, -0.9326153163099971, 0, 5.0)
ops.node(96, -1.3989229744649965, 0, 5.0)
ops.node(97, -1.8652306326199941, 0, 5.0)
ops.node(98, -2.3315382907749935, 0, 5.0)
ops.node(99, -0.4663076581549994, 0, 4.0)
ops.node(100, -0.9326153163099971, 0, 4.0)
ops.node(101, -1.3989229744649965, 0, 4.0)
ops.node(102, -1.8652306326199941, 0, 4.0)
ops.node(103, -0.4663076581549994, 0, 3.0)
ops.node(104, -0.9326153163099971, 0, 3.0)
ops.node(105, -1.3989229744649965, 0, 3.0)
ops.node(106, -0.4663076581549994, 0, 2.0)
ops.node(107, -0.9326153163099971, 0, 2.0)
ops.node(108, -0.4663076581549994, 0, 1.0)
# Boundary condition implementation
ops.fix(98, *[1, 1, 1, 0, 0, 0])
ops.fix(102, *[1, 1, 1, 0, 0, 0])
ops.fix(105, *[1, 1, 1, 0, 0, 0])
ops.fix(107, *[1, 1, 1, 0, 0, 0])
ops.fix(1, *[1, 1, 1, 0, 0, 0])
ops.fix(108, *[1, 1, 1, 0, 0, 0])
ops.fix(78, *[0, 1, 1, 0, 0, 0])
ops.fix(83, *[0, 1, 1, 0, 0, 0])
ops.fix(87, *[0, 1, 1, 0, 0, 0])
ops.fix(90, *[0, 1, 1, 0, 0, 0])
ops.fix(92, *[0, 1, 1, 0, 0, 0])
ops.fix(93, *[0, 1, 1, 0, 0, 0])
# Material definition 
ops.uniaxialMaterial("Concrete01", 1, *[-6.0, -0.004, -6.0, -0.014])
# Element generation for section: long_mem
